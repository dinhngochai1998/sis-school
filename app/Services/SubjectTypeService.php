<?php
/**
 * @Author im.phien
 * @Date   Sep 06, 2022
 */

namespace App\Services;

use Exception;
use Illuminate\Contracts\Pagination\LengthAwarePaginator;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use YaangVu\Constant\PermissionActionConstant;
use YaangVu\Constant\PermissionConstant;
use YaangVu\Exceptions\BadRequestException;
use YaangVu\Exceptions\SystemException;
use YaangVu\LaravelBase\Helpers\QueryHelper;
use YaangVu\LaravelBase\Services\impl\BaseService;
use YaangVu\SisModel\App\Models\impl\SubjectTypeSQL;
use YaangVu\SisModel\App\Providers\SchoolServiceProvider;
use YaangVu\SisModel\App\Traits\RoleAndPermissionTrait;

class SubjectTypeService extends BaseService
{
    use RoleAndPermissionTrait;

    function createModel(): void
    {
        $this->model = new SubjectTypeSQL();
    }

    public function preAdd(object $request): object
    {
        if (!$this->hasPermission(PermissionConstant::subject(PermissionActionConstant::ADD)))
            throw new BadRequestException(__('forbidden.forbidden'), new Exception());

        $subjectType = SubjectTypeSQL::query()->where('name', $request->name)
            ->where('school_id',SchoolServiceProvider::$currentSchool->id)
            ->first();
        if($subjectType)
            throw new BadRequestException(__('validation.invalid'), new Exception());

        $request->school_id = SchoolServiceProvider::$currentSchool->id;

        return $request;
    }

    public function storeRequestValidate(object $request, array $rules = [], array $messages = []): bool|array
    {
        $rules = [
            'name' => 'required',
        ];

        return parent::storeRequestValidate($request, $rules); // TODO: Change the autogenerated stub
    }

   public function preGetAll()
   {
       if (!$this->hasPermission(PermissionConstant::subject(PermissionActionConstant::VIEW)))
           throw new BadRequestException(__('forbidden.forbidden'), new Exception());
       parent::preGetAll(); // TODO: Change the autogenerated stub
   }

   public function getAll(): LengthAwarePaginator
   {
       $this->preGetAll();

       $schoolId = SchoolServiceProvider::$currentSchool->id;
       $data = $this->queryHelper
           ->buildQuery($this->model)
           ->with('school')
           ->where('school_id', $schoolId);

       try {
           $response = $data->paginate(QueryHelper::limit());
           $this->postGetAll($response);

           return $response;
       } catch (Exception $e) {
           throw new SystemException($e->getMessage() ?? __('system-500'), $e);
       }
   }

   public function getSubjectTypeIdsViaSchoolId(int $schoolId): array
   {
       return SubjectTypeSQL::query()
                            ->where('school_id', $schoolId)
                            ->pluck('id')->toArray();
   }

   public function updateRequestValidate(int|string $id, object $request, array $rules = [],
                                         array      $messages = []): bool|array
   {
       $rules = [
         'name' => 'required'
       ];
       return parent::updateRequestValidate($id, $request, $rules, $messages); // TODO: Change the autogenerated stub
   }

    public function preUpdate(int|string $id, object $request)
   {
       $ids = $this->getSubjectTypeIdsViaSchoolId(SchoolServiceProvider::$currentSchool->id);
       if (!$this->hasPermission(PermissionConstant::subject(PermissionActionConstant::EDIT)) || !in_array($id, $ids))
           throw new BadRequestException(__('forbidden.forbidden'), new Exception());

       parent::preUpdate($id, $request); // TODO: Change the autogenerated stub
   }

   public function getViaSubjectId(int $subjectId): object|null
   {
       return SubjectTypeSQL::query()->join('subjects','subjects.subject_type_id','=','subject_types.id')
           ->where('subjects.id',$subjectId)
           ->select('subject_types.*')
           ->first();
   }

   public function getViaId(int $id): Model|SubjectTypeSQL|Builder|null
   {
        return SubjectTypeSQL::whereId($id)->first();
   }
}