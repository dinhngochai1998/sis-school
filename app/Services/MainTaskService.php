<?php

namespace App\Services;

use Exception;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use YaangVu\Constant\PermissionActionConstant;
use YaangVu\Constant\PermissionConstant;
use YaangVu\Constant\TaskManagementConstant;
use YaangVu\Exceptions\BadRequestException;
use YaangVu\Exceptions\ForbiddenException;
use YaangVu\LaravelBase\Services\impl\BaseService;
use YaangVu\SisModel\App\Models\impl\MainTaskSQL;
use YaangVu\SisModel\App\Models\impl\SubTaskSQL;
use YaangVu\SisModel\App\Models\impl\TaskStatusSQL;
use YaangVu\SisModel\App\Providers\SchoolServiceProvider;
use YaangVu\SisModel\App\Traits\RoleAndPermissionTrait;

class MainTaskService extends BaseService
{
    use RoleAndPermissionTrait;

    /**
     * @Description
     *
     * @Author Admin
     * @Date   Jul 07, 2022
     *
     * @param $id
     *
     * @return Model|Builder|null
     */
    public static function getMainTaskById($id): Model|Builder|null
    {
        return MainTaskSQL::query()->where('id', $id)->first();
    }

    function createModel(): void
    {
        $this->model = new MainTaskSQL();
    }

    public function preAdd(object $request)
    {
        if (!$this->hasPermission(PermissionConstant::taskManagement(PermissionActionConstant::ADD))) {
            throw new ForbiddenException(__('forbidden.forbidden'), new Exception());
        }
        $rules = [
            'project_name'    => 'required|max:255',
            'owner_id_no_sql' => 'required|exists:mongodb.users,_id',
        ];
        $user  = (new UserService())->get($request->owner_id_no_sql);
        $request->merge([
                            'type'      => TaskManagementConstant::MAIN_TASK,
                            'owner_id'  => $user->userSql->id ?? null,
                            'school_id' => SchoolServiceProvider::$currentSchool->id ?? null,
                        ]);
        BaseService::doValidate($request, $rules);

        parent::preAdd($request); // TODO: Change the autogenerated stub
    }

    public function preGetAll()
    {
        $this->queryHelper->relations = ['ownerMainTasks'];
        parent::preGetAll(); // TODO: Change the autogenerated stub
    }

    public function preGet(int|string $id)
    {
        $isOwnerOrReviewerOrAssignee = $this->isOwnerOrReviewerOrAssignee($id);
        if (!$this->hasPermission(PermissionConstant::taskManagement(PermissionActionConstant::VIEW)) && !$isOwnerOrReviewerOrAssignee) {
            throw new ForbiddenException(__('forbidden.forbidden'), new Exception());
        }
        $this->queryHelper->relations = ['subtasks' => function ($q) {
            $q->with(['subTaskStatus', 'assigneeSubTasks', 'reviewerSubTasks']);
        }, 'ownerMainTasks'];
        parent::preGet($id); // TODO: Change the autogenerated stub
    }

    /**
     * @Description
     *
     * @Author Admin
     * @Date   Jul 14, 2022
     *
     * @param $id
     *
     * @return bool
     */
    public function isOwnerOrReviewerOrAssignee($id): bool
    {
        $currentUserId = BaseService::currentUser()->id;
        $mainTask      = $this->model->where('id', $id)->where('owner_id', $currentUserId)->first();
        $subTask       = SubTaskSQL::query()->where('main_task_id', $id)
                                   ->where(function ($query) use ($currentUserId) {
                                       $query->where('reviewer_id', '=', $currentUserId);
                                       $query->orWhere('assignee_id', '=', $currentUserId);
                                   })->first();

        return $subTask || $mainTask;
    }

    /**
     * @throws Exception
     */
    public function preUpdate(int|string $id, object $request)
    {
        $isOwnerOrReviewerOrAssignee = $this->isOwnerOrReviewerOrAssignee($id);
        if (!$this->hasPermission(PermissionConstant::taskManagement(PermissionActionConstant::EDIT)) && !$isOwnerOrReviewerOrAssignee) {
            throw new ForbiddenException(__('forbidden.forbidden'), new Exception());
        }

        $rules = [
            'project_name'    => 'required|max:255',
            'owner_id_no_sql' => 'required|exists:mongodb.users,_id',
        ];
        $user  = (new UserService())->get($request->owner_id_no_sql);
        $request->merge([
                            'type'      => TaskManagementConstant::MAIN_TASK,
                            'owner_id'  => $user->userSql->id ?? null,
                            'school_id' => SchoolServiceProvider::$currentSchool->id ?? null,
                        ]);
        BaseService::doValidate($request, $rules);
        $mainTask      = $this->model->where('id', $id)->first();
        $currentUserId = BaseService::currentUser()->userNoSql->_id;

        if ($currentUserId != $request->owner_id_no_sql) {
            $mainTask->owner_id_no_sql   = $request->owner_id_no_sql;
            $mainTask->short_description = $request->short_description ?? null;
            $mainTask->project_name      = $request->project_name;
            $mainTask->task_status_id    = $request->task_status_id ?? null;
            $mainTask->save();
            $urlEditMainTask = env('URL_PROJECT') . '/edit-main-task/' . $mainTask->id;
            $content
                             = "You are transferred to become the owner of a  " . $mainTask->project_name;
            $title           = 'Transfer to another owner ';
            (new SubTaskService())->sendNotificationTaskManagement((array)$mainTask->owner_id,
                                                                   (array)$mainTask->owner_id_no_sql, $title,
                                                                   $content, $urlEditMainTask);

            return $mainTask;

        }
    }

    public function preDelete(int|string $id)
    {
        $subTask                 = SubTaskSQL::query()->where('main_task_id', $id)->pluck('task_status_id')->toArray();
        $arrStatusExceptAssignee = TaskStatusSQL::query()->whereIn('id', $subTask)
                                                ->where('name', '<>', TaskManagementConstant::ASSIGNED)
                                                ->get()
                                                ->toArray();
        if (!empty($arrStatusExceptAssignee)) {
            throw new BadRequestException(__('taskManagementError.delete-main-task'), new Exception());
        }
        parent::preDelete($id);  // TODO: Change the autogenerated stub
    }
}
