<?php

namespace App\Services;

use App\Helpers\FcmHelper;
use Carbon\Carbon;
use Exception;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Date;
use YaangVu\Constant\PermissionActionConstant;
use YaangVu\Constant\PermissionConstant;
use YaangVu\Constant\TaskManagementConstant;
use YaangVu\Exceptions\BadRequestException;
use YaangVu\Exceptions\ForbiddenException;
use YaangVu\LaravelAws\S3Service;
use YaangVu\LaravelBase\Services\impl\BaseService;
use YaangVu\SisModel\App\Models\impl\DeviceTokenSQL;
use YaangVu\SisModel\App\Models\impl\MainTaskSQL;
use YaangVu\SisModel\App\Models\impl\NotificationNoSQL;
use YaangVu\SisModel\App\Models\impl\SubTaskSQL;
use YaangVu\SisModel\App\Models\impl\UserNoSQL;
use YaangVu\SisModel\App\Providers\SchoolServiceProvider;
use YaangVu\SisModel\App\Traits\RoleAndPermissionTrait;

class SubTaskService extends BaseService
{
    use RoleAndPermissionTrait;

    protected UserService       $userService;
    protected TaskStatusService $taskStatusService;

    public function __construct()
    {
        $this->userService       = new UserService();
        $this->taskStatusService = new TaskStatusService();
        parent::__construct();
    }

    function createModel(): void
    {
        $this->model = new SubTaskSQL();
    }

    public function preAdd(object $request)
    {
        if (!$this->hasPermission(PermissionConstant::taskManagement(PermissionActionConstant::ADD))) {
            throw new ForbiddenException(__('forbidden.forbidden'), new Exception());
        }
        parent::preAdd($request); // TODO: Change the autogenerated stub
    }

    public function preGetAll()
    {
        $this->queryHelper->relations = ['subTaskStatus', 'assigneeSubTasks', 'reviewerSubTasks', 'ownerSubTasks'];
        parent::preGetAll(); // TODO: Change the autogenerated stub
    }

    public function preGet(int|string $id)
    {
        $isAssigneeOrOwner = $this->isOwnerAssignee($id);
        if (!$this->hasPermission(PermissionConstant::taskManagement(PermissionActionConstant::VIEW)) && !$isAssigneeOrOwner) {
            throw new ForbiddenException(__('forbidden.forbidden'), new Exception());
        }
        $this->queryHelper->relations
            = ['subTaskStatus', 'assigneeSubTasks', 'reviewerSubTasks', 'ownerSubTasks', 'mainTasks'];
        parent::preGet($id); // TODO: Change the autogenerated stub
    }

    /**
     * @Description
     *
     * @Author Admin
     * @Date   Jul 18, 2022
     *
     * @param $id
     *
     * @return bool
     */
    public function isOwnerAssignee($id): bool
    {
        $currentUserId = BaseService::currentUser()->id;

        $subTask = $this->model->query()->where('id', $id)
                               ->where(function ($query) use ($currentUserId) {
                                   $query->where('reviewer_id', '=', $currentUserId);
                                   $query->orWhere('assignee_id', '=', $currentUserId);
                                   $query->orWhere('owner_id', '=', $currentUserId);
                               })->first();

        $mainTaskId = $subTask->main_task_id ?? null;
        $mainTask   = MainTaskSQL::query()->where('id', $mainTaskId)->where('owner_id', $currentUserId)->first();

        return $subTask || $mainTask;
    }

    /**
     * @throws Exception
     */
    public function preUpdate(int|string $id, object $request)
    {
        $isAssigneeOrOwner = $this->isOwnerAssignee($id);
        if (!$this->hasPermission(PermissionConstant::taskManagement(PermissionActionConstant::EDIT)) && !$isAssigneeOrOwner) {
            throw new ForbiddenException(__('forbidden.forbidden'), new Exception());
        }
        $subTask             = $this->model->where('id', $id)->first();
        $dateCreatedMainTask = (new MainTaskService())->get($subTask->main_task_id)->created_at->toDateTime()
                                                                                               ->format('Y-m-d') ?? null;
        $rules               = [
            'task_name' => 'required|max:255',
            'deadline'  => 'required|date|date_format:Y-m-d|after_or_equal:' . $dateCreatedMainTask,
        ];
        BaseService::doValidate($request, $rules);
        $oldStatusIndividual = TaskStatusService::getStatusBySubTaskId($subTask->task_status_id);
        $newStatusIndividual = TaskStatusService::getStatusBySubTaskId($request->task_status_id);

        $currentUser = BaseService::currentUser()->userNoSql;
        $mainTask    = MainTaskService::getMainTaskById($subTask->main_task_id);

        if (($currentUser->_id == $subTask->reviewer_id_no_sql) && $oldStatusIndividual->name == TaskManagementConstant::DONE) {
            $titleNotification
                               = ($newStatusIndividual->name == TaskManagementConstant::CLOSES) ? 'Reviewer approved' : 'Reviewer rejected';
            $linkDetailSubTask = env('URL_PROJECT') . '/edit-main-task/' . $subTask->id;
            $content           = $titleNotification . ' ' . $mainTask->project_name . ' ' . $subTask->task_name;
            $title             = $titleNotification . ' ' . 'sub task';

            $this->sendNotificationTaskManagement((array)$subTask->assignee_id,
                                                  (array)$subTask->assignee_id_no_sql, $title, $content,
                                                  $linkDetailSubTask);
            $subTask->task_status_id = $newStatusIndividual->id;
            $subTask->save();

            return $subTask;
        }
        $reviewer = UserService::getViaId($request->reviewer_id_no_sql ?? "");
        $assignee = UserService::getViaId($request->assignee_id_no_sql ?? "");

        $subTask->reviewer_id_no_sql = $request->reviewer_id_no_sql ?? null;
        $subTask->assignee_id_no_sql = $request->assignee_id_no_sql ?? null;
        $subTask->reviewer_id        = $reviewer->userSql->id ?? null;
        $subTask->assignee_id        = $assignee->userSql->id ?? null;
        $subTask->task_status_id     = $request->task_status_id ?? null;

        $subTask->save();
        parent::preUpdate($id, $request); // TODO: Change the autogenerated stub
    }

    /**
     * @throws Exception
     */
    public function sendNotificationTaskManagement(array $userIds, array $userIdNoSql, $titleNotification,
                                                         $content, $link = null, $fullName = null): bool
    {
        $arrEmails    = $this->userService->getEmailFullNameViaId($userIdNoSql);
        $deviceTokens = DeviceTokenSQL::query()->whereIn('user_id', $userIds)->pluck('device_token')->toArray();
        if (!empty($deviceTokens)) {
            foreach ($arrEmails as $key => $value) {
                $fullNameNotification = !empty($fullName) ? $fullName : $key;
                $title                = $titleNotification ?? null;
                $contents             = $fullNameNotification . ' ' . $content;
                $FcmHelper            = new FcmHelper();
                $FcmHelper->pushToDevices($deviceTokens, $title, $contents, $link);
            }
        }

        $receiverIds   = UserNoSQL::query()->whereIn('_id', $userIdNoSql)->pluck('_id', 'full_name')->toArray();
        $notifications = $this->_handleDataNotification($receiverIds, $content, $titleNotification, $fullName);
        if ($notifications != []) {
            NotificationNoSQL::query()->insert($notifications);
        }

        return true;
    }

    public function _handleDataNotification($receiverIds, $content, $title, $fullName = null): array
    {
        $notifications = [];
        $date          = Carbon::now();
        $senderIds     = BaseService::currentUser()?->userNoSql;
        foreach ($receiverIds as $key => $receiverId) {
            $fullNameNotification = !empty($fullName) ? $fullName : $key;
            $notifications []     = [
                'user_id_from' => $senderIds->_id ?? null,
                'user_id_to'   => $receiverId,
                'title'        => $title,
                'contents'     => $fullNameNotification . ' ' . $content,
                'time_created' => $date->toDayDateTimeString(),
                'time_read'    => null,
                'created_at'   => $date->toDateTimeString(),
                'updated_at'   => $date->toDateTimeString(),
            ];
        }

        return $notifications;
    }

    /**
     * @throws Exception
     */
    public function postUpdate(int|string $id, object $request, Model $model)
    {
        $model->download_file = $this->downloadFileS3($request->file);
        $model->save();
        $ownerId          = $model->owner_id_no_sql ?? null;
        $user             = UserNoSQL::query()->where('_id', $ownerId)->first();
        $model->full_name = $user?->full_name;

        parent::postUpdate($id, $request, $model); // TODO: Change the autogenerated stub
    }

    /**
     * @Description
     *
     * @Author Admin
     * @Date   Jun 27, 2022
     *
     * @param $request
     *
     * @return Builder|Model
     * @throws Exception
     */
    public function createTaskIndividual($request): Builder|Model
    {
        if (!$this->hasPermission(PermissionConstant::taskManagement(PermissionActionConstant::ADD))) {
            throw new ForbiddenException(__('forbidden.forbidden'), new Exception());
        }
        $now   = Carbon::now()->format('Y-m-d');
        $rules = [
            'task_name'          => 'required|max:255',
            'task_status_id'     => 'required|integer|exists:task_status,id',
            'deadline'           => 'date|required|date_format:Y-m-d|after_or_equal:' . $now,
            'assignee_id_no_sql' => 'required|exists:mongodb.users,_id',
            'owner_id_no_sql'    => 'required|exists:mongodb.users,_id',
        ];
        if ($request->assignee_id_no_sql == $request->reviewer_id_no_sql)
            throw new BadRequestException(__('validation.assignee-reviewer'), new Exception());

        $owner    = UserService::getViaId($request->owner_id_no_sql ?? '');
        $assignee = UserService::getViaId($request->assignee_id_no_sql ?? '');
        $reviewer = UserService::getViaId($request->reviewer_id_no_sql ?? '');

        $request->merge([
                            'type'          => TaskManagementConstant::INDIVIDUAL,
                            'owner_id'      => $owner->userSql->id ?? null,
                            'assignee_id'   => $assignee->userSql->id ?? null,
                            'reviewer_id'   => $reviewer->userSql->id ?? null,
                            'created_by'    => BaseService::currentUser()->id ?? null,
                            'school_id'     => SchoolServiceProvider::$currentSchool->id ?? null,
                            'download_file' => $this->downloadFileS3($request->file)
                        ]);
        BaseService::doValidate($request, $rules);

        $taskIndividual    = $this->model->create($request->all());
        $linkDetailSubTask = env('URL_PROJECT') . '/edit-individual-task/' . $taskIndividual->id;

        if (!empty($taskIndividual->assignee_id_no_sql)) {
            $content = 'You are assignee in new task of ' . $taskIndividual->task_name;
            $title   = 'Add new individual task ';
            $this->sendNotificationTaskManagement((array)$taskIndividual->assignee_id,
                                                  (array)$taskIndividual->assignee_id_no_sql, $title, $content,
                                                  $linkDetailSubTask);
        }
        if (!empty($taskIndividual->reviewer_id_no_sql)) {
            $content = 'You are assignee in new task as a reviewer of ' . $taskIndividual->task_name;
            $title   = 'Add new individual task ';
            $this->sendNotificationTaskManagement((array)$taskIndividual->reviewer_id,
                                                  (array)$taskIndividual->reviewer_id_no_sql, $title, $content,
                                                  $linkDetailSubTask);
        }

        return $taskIndividual;
    }

    /**
     * @Description
     *
     * @Author Admin
     * @Date   Jun 29, 2022
     *
     * @param $id
     * @param $request
     *
     * @return Model|Builder|null
     * @throws Exception
     */
    public function editTaskIndividual($id, $request): Model|Builder|null
    {
        $isAssigneeOrOwner = $this->isOwnerAssignee($id);

        if (!$this->hasPermission(PermissionConstant::taskManagement(PermissionActionConstant::EDIT)) && !$isAssigneeOrOwner) {
            throw new ForbiddenException(__('forbidden.forbidden'), new Exception());
        }

        $now   = Carbon::now()->format('Y-m-d');
        $rules = [
            'task_name'          => 'required|max:255',
            'task_status_id'     => 'required|integer|exists:task_status,id',
            'deadline'           => 'date|required|date_format:Y-m-d|after_or_equal:' . $now,
            'assignee_id_no_sql' => 'required|exists:mongodb.users,_id',
            'owner_id_no_sql'    => 'required|exists:mongodb.users,_id',
        ];
        if ($request->assignee_id_no_sql == $request->reviewer_id_no_sql)
            throw new BadRequestException(__('validation.assignee-reviewer'), new Exception());

        BaseService::doValidate($request, $rules);

        $currentUser    = BaseService::currentUser()->userNoSql;
        $taskIndividual = $this->model->where('id', $id)->first();

        $assignee            = UserService::getViaId($request->assignee_id_no_sql ?? '');
        $reviewer            = UserService::getViaId($request->reviewer_id_no_sql ?? '');
        $owner               = UserService::getViaId($request->owner_id_no_sql ?? '');
        $oldStatusIndividual = TaskStatusService::getStatusBySubTaskId($taskIndividual->task_status_id);
        $newStatusIndividual = TaskStatusService::getStatusBySubTaskId($request->task_status_id);

        $request->merge([
                            'assignee_id'   => $assignee->userSql->id ?? null,
                            'reviewer_id'   => $reviewer->userSql->id ?? null,
                            'owner_id'      => $owner->userSql->id ?? null,
                            'download_file' => $this->downloadFileS3($request->file)
                        ]);
        $linkDetailTaskIndividual = env('URL_PROJECT') . '/edit-individual-task/' . $taskIndividual->id;
        if (($currentUser->_id == $taskIndividual->reviewer_id_no_sql) && $oldStatusIndividual->name == TaskManagementConstant::DONE) {
            $titleNotification
                     = ($newStatusIndividual->name == TaskManagementConstant::CLOSES) ? 'Reviewer approved' : 'Reviewer rejected';
            $content = $titleNotification . ' ' . $taskIndividual->task_name;
            $title   = $titleNotification . ' individual task';
            $this->sendNotificationTaskManagement((array)$taskIndividual->assignee_id,
                                                  (array)$taskIndividual->assignee_id_no_sql, $title, $content,
                                                  $linkDetailTaskIndividual);
            $taskIndividual->task_status_id = $newStatusIndividual->id;
            $taskIndividual->save();

            return $taskIndividual;
        }
        if ($currentUser->_id != $request->owner_id_no_sql) {
            $taskIndividual->update($request->all());
            $taskIndividual->save();
            $content
                   = 'You are transferred to become the owner of a ' . $taskIndividual->task_name;
            $title = 'Transfer to another owner ';
            $this->sendNotificationTaskManagement((array)$taskIndividual->owner_id,
                                                  (array)$taskIndividual->owner_id_no_sql, $title, $content,
                                                  $linkDetailTaskIndividual);

            return $taskIndividual;
        }
        if (($currentUser->_id == $taskIndividual->assignee_id_no_sql) && ($oldStatusIndividual->name != TaskManagementConstant::ASSIGNED)) {
            $taskIndividual->task_status_id = $newStatusIndividual->id;
            $taskIndividual->save();

            return $taskIndividual;
        }
        if (($currentUser->_id == $taskIndividual->owner_id_no_sql) && ($oldStatusIndividual->name != TaskManagementConstant::ASSIGNED)) {
            $taskIndividual->task_status_id = $newStatusIndividual->id;
            $taskIndividual->save();

            return $taskIndividual;
        }

        $taskIndividual->update($request->all());

        return $taskIndividual;
    }

    /**
     * @throws Exception
     */
    public function createSubTask($request): array
    {
        if (!$this->hasPermission(PermissionConstant::taskManagement(PermissionActionConstant::ADD))) {
            throw new ForbiddenException(__('forbidden.forbidden'), new Exception());
        }
        $checkDuplicate = in_array($request->reviewer_id_no_sql, $request->assignee_ids_no_sql);
        if ($checkDuplicate)
            throw new BadRequestException(__('validation.assignee-reviewer'), new Exception());
        $dateCreatedMainTask = (new MainTaskService())->get($request->main_task_id)->created_at->toDateTime()
                                                                                               ->format('Y-m-d');
        $rules               = [
            'task_name'             => 'required|max:255',
            'task_status_id'        => 'required|integer|exists:task_status,id',
            'main_task_id'          => 'integer|exists:main_tasks,id',
            'deadline'              => 'required|date|date_format:Y-m-d|after_or_equal:' . $dateCreatedMainTask,
            'assignee_ids_no_sql.*' => 'required|exists:mongodb.users,_id',
        ];

        $reviewer     = UserService::getViaId($request->reviewer_id_no_sql ?? '');
        $owner        = UserService::getViaId($request->owner_id_no_sql ?? '');
        $mainTask     = MainTaskService::getMainTaskById($request->main_task_id);
        $dataSubTasks = [];
        BaseService::doValidate($request, $rules);
        foreach ($request->assignee_ids_no_sql as $value) {
            $assignee        = UserService::getViaId($value ?? '');
            $dataSubTasks [] = [
                "type"               => TaskManagementConstant::SUB_TASK,
                "assignee_id"        => $assignee->userSql->id ?? null,
                "reviewer_id"        => $reviewer->userSql->id ?? null,
                "created_by"         => BaseService::currentUser()->id,
                "task_name"          => $request->task_name,
                "deadline"           => $request->deadline,
                "description"        => $request->description,
                "main_task_id"       => $request->main_task_id,
                "task_status_id"     => $request->task_status_id,
                "owner_id"           => $owner->userSql->id ?? null,
                "owner_id_no_sql"    => $request->owner_id_no_sql,
                "assignee_id_no_sql" => $value,
                "reviewer_id_no_sql" => $request->reviewer_id_no_sql,
                "file"               => $request->file,
                "created_at"         => Carbon::now(),
                'school_id'          => SchoolServiceProvider::$currentSchool->id ?? null,
                'download_file'      => $this->downloadFileS3($request->file)
            ];

        }
        $this->model->insert($dataSubTasks);
        $linkDetailTaskIndividual = env('URL_PROJECT') . '/edit-main-task/' . $mainTask->id;
        $arrAssigneeIdsNoSql      = [];
        $arrAssigneeIdsSql        = [];
        $arrReviewerIdsNoSql      = [];
        $arrReviewerIdsSql        = [];
        foreach ($dataSubTasks as $subTask) {
            $arrAssigneeIdsNoSql[] = $subTask['assignee_id_no_sql'];
            $arrAssigneeIdsSql[]   = $subTask['assignee_id'];
            $arrReviewerIdsNoSql[] = $subTask['reviewer_id_no_sql'];
            $arrReviewerIdsSql[]   = $subTask['reviewer_id'];
        }
        if (!empty($arrAssigneeIdsNoSql)) {
            $content = 'You are assignee in new task of ' . $mainTask->project_name . '-' . $request->task_name;
            $title   = 'Add new sub task ';
            $this->sendNotificationTaskManagement($arrAssigneeIdsSql, $arrAssigneeIdsNoSql, $title, $content,
                                                  $linkDetailTaskIndividual);
        }
        if (!empty($arrReviewerIdsNoSql)) {
            $content
                   = 'You are assignee in new task as a reviewer of ' . $mainTask->project_name . '-' . $request->task_name;
            $title = 'Add new sub task ';
            $this->sendNotificationTaskManagement($arrReviewerIdsSql, $arrReviewerIdsNoSql, $title, $content,
                                                  $linkDetailTaskIndividual);
        }

        return $dataSubTasks;
    }

    /**
     * @param $file
     *
     * @return string|null
     */
    public function downloadFileS3($file): ?string
    {
        return !empty($file) ? (new S3Service())->createPresigned($file) : null;
    }
}
